plugins {
  id 'java'
  id 'groovy'
  id 'scala'
  id 'com.diffplug.spotless' version '5.6.1'
  id 'org.owasp.dependencycheck' version '6.5.3'
}

repositories {
  mavenCentral()

  flatDir {
    dirs 'libs'
  }
}

dependencies {
  compileOnly name: 'appian-plug-in-sdk-20.4-stub'
  compileOnly 'org.apache.commons:commons-lang3:3.8'
  compileOnly 'log4j:log4j:1.2.17'
  compileOnly 'org.osgi:org.osgi.framework:1.9.0'


  implementation 'com.appian:connected-systems-client:1.1.0'
  implementation 'commons-codec:commons-codec:1.14'
  implementation 'org.apache.kafka:kafka-clients:3.5.0'
  implementation 'com.google.code.gson:gson:2.9.0'
  implementation 'com.jayway.jsonpath:json-path:2.5.0'
  implementation 'net.minidev:json-smart:2.4.10'
  implementation 'net.minidev:asm:1.0.2'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'org.xerial.snappy:snappy-java:1.1.8.4'
  implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'


  testImplementation 'junit:junit:4.12'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.5.2'
  testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'
}

test {
  useJUnitPlatform()
}

configurations {
  testImplementation.extendsFrom compileOnly
  // excludes transitive dependencies
  implementation.transitive = false
}

spotless {
  encoding 'UTF-8'

  groovyGradle {
    target '**/*.gradle'
    greclipse().configFile('.settings/greclipse.properties')
  }

  java {
    eclipse().configFile('.settings/org.eclipse.jdt.core.prefs')
    removeUnusedImports()
  }

  format 'xml', {
    target 'src/**/*.xml'
    eclipseWtp('xml').configFile('.settings/org.eclipse.wst.xml.core.prefs')
  }

  format 'misc', {
    target '*.md'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
}

jar {
  dependsOn check
  duplicatesStrategy = DuplicatesStrategy.FAIL

  configurations.implementation.setCanBeResolved(true)

  into('META-INF/lib') {
    from(configurations.implementation)
  }

  into('src') {
    from (sourceSets.main.allJava)
  }

  manifest {
    attributes("Spring-Context": "*;publish-context:=false")
  }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = new XmlSlurper().parse(file('src/main/resources/appian-plugin.xml')).'plugin-info'.version
